{"meta":{"title":"never too late","subtitle":"自我管理12 整理 思维导图","description":"备忘 整理 思维导图","author":"joeJun","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-01-03T06:39:15.121Z","updated":"2018-01-03T06:21:16.899Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-01-08T06:02:08.337Z","updated":"2018-01-08T06:02:08.290Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-01-08T06:01:59.437Z","updated":"2018-01-08T06:01:59.390Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Hexo+Github搭建个人博客（三）---icarus主题使用","slug":"hexo/hexo-theme-use1","date":"2018-01-08T06:38:12.255Z","updated":"2018-01-08T07:08:24.546Z","comments":true,"path":"2018/01/08/hexo/hexo-theme-use1/","link":"","permalink":"http://yoursite.com/2018/01/08/hexo/hexo-theme-use1/","excerpt":"新建文章","text":"新建文章 写好一个markdown文件，放入 hexo\\source_posts目录下文章标题参考如下：1234title: 使用Hexo+Github搭建个人博客（三）---icarus主题使用categories: hexotags: [icarus,hexo]thumbnail: http://wx4.sinaimg.cn/mw1024/a69cd24bgy1fgl7umz9tkj21hc0xc4jp.jpg","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"icarus","slug":"icarus","permalink":"http://yoursite.com/tags/icarus/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"spring cloud 微服务（三） --服务消费与负载均衡","slug":"spring-cloud-step/scs-3","date":"2018-01-05T07:54:14.839Z","updated":"2018-01-08T05:36:19.671Z","comments":true,"path":"2018/01/05/spring-cloud-step/scs-3/","link":"","permalink":"http://yoursite.com/2018/01/05/spring-cloud-step/scs-3/","excerpt":"Ribbon","text":"Ribbon 使用负载均衡，轮询访问 服务提供方 Provider 启动第2个provider服务，端口使用 9002 1java -jar -Dserver.port=9092 xxxProvider.jar eureka中发现2个 provider服务 1UP (2) - joe-PC:provider-service:9002 , joe-PC:provider-service:9001 创建消费者工程 构建基础Springboot工程 pom.xml如下： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.3.5.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent f rom repository --&gt;&lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;!--&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;--&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;!--&lt;spring-cloud.version&gt;Brixton.RELEASE&lt;/spring-cloud.version&gt;--&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Brixton.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 启动类配置 1234567891011121314@EnableDiscoveryClient@SpringBootApplicationpublic class EurekaServiceConsumerApplication &#123; @Bean @LoadBalanced RestTemplate restTemplate()&#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(EurekaServiceConsumerApplication.class, args); &#125;&#125; 配置文件 123spring.application.name=consumer-ribbonserver.port=9005eureka.client.serviceUrl.defaultZone=http://localhost:9000/eureka/ 创建服务消费接口 1234567891011@RestControllerpublic class ConsumerController &#123; @Autowired RestTemplate restTemplate; @RequestMapping(value = \"/consume\", method = RequestMethod.GET) public String consume()&#123; return restTemplate.getForEntity(\"http://PROVIDER-SERVICE/query?msg=hello-provider\" ,String.class).getBody(); &#125;&#125; 请求2次，9001 9002控制台分别输出日志： 2018-01-05 17:16:38.719 INFO 4708 — [nio-9001-exec-1] c.j.e.controller.ProviderController :Provider, /query ,host:joe-PC,serviceId:provider-service,msg:hello-provider 2018-01-05 17:16:51.416 INFO 22188 — [nio-9002-exec-1] c.j.e.controller.ProviderController :Provider, /query ,host:joe-PC,serviceId:provider-service,msg:hello-provider","categories":[{"name":"spring cloud step","slug":"spring-cloud-step","permalink":"http://yoursite.com/categories/spring-cloud-step/"}],"tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]},{"title":"spring cloud 微服务（二） --服务注册与发现","slug":"spring-cloud-step/scs-2","date":"2018-01-05T06:52:42.208Z","updated":"2018-01-08T05:36:16.598Z","comments":true,"path":"2018/01/05/spring-cloud-step/scs-2/","link":"","permalink":"http://yoursite.com/2018/01/05/spring-cloud-step/scs-2/","excerpt":"Eureka服务治理","text":"Eureka服务治理 定义：全称Spring Cloud Eureka，是 Spring Cloud Netflix 组件之一。 功能：服务注册、服务发现和服务检测监控等 支持集群（高可用性） 服务与服务之间通过注册中心找到各自实例 创建服务注册中心 创建基础Spring Boot工程，pom.xml引入依赖： 123456789101112131415161718192021222324252627282930&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.3.5.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Brixton.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 启动类加上注解 @EnableEurekaServer，作用：把这个服务注解成Eureka注册服务器 12345678@EnableEurekaServer //启动一个服务注册中心提供给其他应用进行对话@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServerApplication.class, args); &#125;&#125; 配置application.properties 123456server.port=9000#eureka.instance.hostname=localhost# 在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，设置falseeureka.client.register-with-eureka=falseeureka.client.fetch-registry=falseeureka.client.serviceUrl.defaultZone=http://localhost:$&#123;server.port&#125;/eureka/ 启动 localhost:9000 显示注册中心界面，没有服务已注册 创建服务提供方，在服务中心注册 创建基础Spring Boot工程，pom.xml引入依赖： 1234567891011121314151617&lt;dependencies&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Brixton.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 创建服务提供接口 12345678910111213@RestControllerpublic class ProviderController &#123; private final Logger logger = Logger.getLogger(getClass()); @Autowired private DiscoveryClient client; @RequestMapping(value = \"/query\" ,method = RequestMethod.GET) public String add(@RequestParam String msg)&#123; ServiceInstance instance = client.getLocalServiceInstance(); logger.info(\"Provider, /query ,host:\" + instance.getHost() + \",serviceId:\"+instance.getServiceId() +\",msg:\"+msg); return msg; &#125;&#125; 配置文件 123spring.application.name=provider-serviceserver.port=9001eureka.client.serviceUrl.defaultZone=http://localhost:9000/eureka/ 启动类配置 12345678@EnableDiscoveryClient //激活Eureka中的DiscoveryClient实现，实现服务信息输出到注册中心。@SpringBootApplicationpublic class EurekeServiceProviderApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekeServiceProviderApplication.class, args); &#125;&#125; 启动provider服务，在eureka控制台发现该服务已被成功注册","categories":[{"name":"spring cloud step","slug":"spring-cloud-step","permalink":"http://yoursite.com/categories/spring-cloud-step/"}],"tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]},{"title":"spring cloud 微服务（一） --介绍","slug":"spring-cloud-step/scs-1","date":"2018-01-05T06:08:49.218Z","updated":"2018-01-08T05:35:47.051Z","comments":true,"path":"2018/01/05/spring-cloud-step/scs-1/","link":"","permalink":"http://yoursite.com/2018/01/05/spring-cloud-step/scs-1/","excerpt":"传统架构过程","text":"传统架构过程 单体应用 单个web服务器、应用、db 发布快速灵活，符合简单业务需求 垂直架构 业务变得复杂，系统分成前端系统、后台应用、管控台等 使用SSH、乃至前后端分离等 服务化架构（SOA 面向服务架构，是一种松耦合的服务架构。） 服务子系统越来越多，即考虑服务SOA化，一个系统划分多个组件服务来完成 如项目中 订单服务组件化、公共服务组件等 如使用 Dubbo进行服务治理 微服务 （SOA的扩展，拆分粒度更细、彻底组件化） 业务系统服务彻底组件化，一个组件即一个独立产品、对外提供服务 每个微服务有各自独立运行空间、db 组件间推荐使用Rest Api方式请求 各个服务独立部署、维护、扩展、负载均衡 Spring Cloud 基于Spring Boot实现的云应用开发工具 核心特性 服务注册、发现 Eureka：连接各个服务 配置中心 Spring Cloud Config：分布式版本管理 负载均衡 Ribbon： 断路器 Hystrix：监控服务健康，多次失败后熔断 服务间调用 Feign 网关 Zuul：转发对外的请求、服务，API网关作用","categories":[{"name":"spring cloud step","slug":"spring-cloud-step","permalink":"http://yoursite.com/categories/spring-cloud-step/"}],"tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]},{"title":"(Hexo+Github)绑定个人域名","slug":"hexo/bind-domain","date":"2018-01-05T00:55:45.467Z","updated":"2018-01-08T06:58:36.411Z","comments":true,"path":"2018/01/05/hexo/bind-domain/","link":"","permalink":"http://yoursite.com/2018/01/05/hexo/bind-domain/","excerpt":"域名服务选择GoDaddy，国内的万网虽然便宜些，但据说有诸多弊端（随时会被zf关停~）；","text":"域名服务选择GoDaddy，国内的万网虽然便宜些，但据说有诸多弊端（随时会被zf关停~）； GoDaddy 购买： 我选择1年的，其他都不选择（要钱的啊-.-），支持支付宝购买~ 激活： 会往注册邮箱发送激活邮件，记得确认才能在GoDaddy上继续配置 配置： DNS MANAGEMENT目录下 添加Records，blog为子域名 Type | Name | Value CNAME | blog | joejun.github.ioHexo 添加CNAME：注意必须是大写，在hexo的source目录下新建，里面写入域名 1blog.zhaopeijun.com 生成文件，上传github，测试博客地址ok~ 12hexo ghexo d","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"godddy","slug":"godddy","permalink":"http://yoursite.com/tags/godddy/"}]},{"title":"使用Hexo+Github搭建个人博客（二）---主题安装配置","slug":"hexo/hexo-theme-setup","date":"2018-01-03T08:26:49.686Z","updated":"2018-01-08T08:17:59.676Z","comments":true,"path":"2018/01/03/hexo/hexo-theme-setup/","link":"","permalink":"http://yoursite.com/2018/01/03/hexo/hexo-theme-setup/","excerpt":"官网主题选择(https://hexo.io/themes/)这里选择的是 hexo-theme-icarus，下面的安装配置是参考其github手册执行的","text":"官网主题选择(https://hexo.io/themes/)这里选择的是 hexo-theme-icarus，下面的安装配置是参考其github手册执行的 安装项目根目录执行1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 博客项目根目录下“_config.yml”修改属性1theme: icarus 主题文件夹下_config.yml.example 更名为 _config.yml 配置 主题下“_config.yml”几个主要配置属性 12345678910111213141516171819202122232425262728293031323334353637383940# Menusmenu: Home: . Archives: archives Categories: categories Tags: tags About: about# Customizecustomize: logo: enabled: true width: 40 height: 40 url: images/logo.png profile: enabled: true # Whether to show profile bar avatar: css/images/avatar.png gravatar: # Gravatar email address, if you enable Gravatar, your avatar config will be overriden author: joeJun author_title: farmer location: shanghai, China follow: https://github.com/joejun highlight: monokai sidebar: right # sidebar position, options: left, right or leave it empty thumbnail: true # enable posts thumbnail, options: true, false favicon: # path to favicon social_links: github: https://github.com/joejun twitter: / facebook: / dribbble: / rss: / social_link_tooltip: true # enable the social link tooltip, options: true, false # Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false 文章界面放宽 文章中间宽度太窄，显示代码长度不够，ICARUS主题提供修改自定义宽度； 主题下的 source/css/_variables.styl打开编辑，修改第43行 1234567 main-column = 10 //从7修改为10 ``` * 代码上下文边距调小 修改 /icarus/source/css/——highlight/index.styl ```java # padding: 15px 20px padding: 10px 10px 在文章页面关闭侧边栏 具体文章看时侧边栏会引起分心，设置为只在首页显示； 添加站长统计在theme的_config.yml中的末尾添加以下 1cnzz: 这里填入你在站长统计注册后的web_id 主题的layout/common/添加文件为cnzz.ejs，内容如下： 123&lt;% if (theme.cnzz)&#123; %&gt; Analyse with &lt;script src=\"https://s22.cnzz.com/z_stat.php?id=yourId&amp;web_id=yourId\" language=\"JavaScript\"&gt;&lt;/script&gt;&lt;% &#125; %&gt; 主题的layout/common/footer.ejs修改内容如下： 1...PPOffice&lt;/a&gt;.&lt;%- partial('cnzz') %&gt;","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]},{"title":"使用Hexo+Github搭建个人博客（一）---安装部署","slug":"hexo/hello-hexo","date":"2018-01-03T07:04:56.065Z","updated":"2018-01-08T04:15:50.538Z","comments":true,"path":"2018/01/03/hexo/hello-hexo/","link":"","permalink":"http://yoursite.com/2018/01/03/hexo/hello-hexo/","excerpt":"安装工具","text":"安装工具 Node.js node -v : v6.11.2 npm -v : 5.3.0Git.exe git –version：2.5.1.windows.1 正常显示则版本安装成功 HexoHexo官网 里面有详细的执行步骤12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 安装过程中发生的报错：提示用户无权限： 关掉bash窗口，项目路径下重新打开窗口执行、ok；npm install报错： npm set registry https://registry.npmjs.org/ //重新设定registry，在执行install ok； 新建项目结构如下1234567|—— _config.yml // 网站的配置信息|—— package.json // 项目包信息|—— scaffolds // 模板文件夹，Hexo根据scaffold中的模板来新建文件|—— source // 存放用户资源的地方| |—— _drafts // 存放草稿| |—— _posts // 存放文章|—— themes // 主题文件夹 运行项目12hexo d //hexo genereate 生成静态文件（结果文件）hexo s //hexo server 启动本地服务, 默认http://localhost:4000/ 访问 常用组合命令12$ hexo d -g // 生成、部署$ hexo s -g // 生成、预览 部署到GitHub PagesGitHub帐号只能创建一个repository来存放GitHubPages，而且仓库名称必须是username/username.github.io，这是固定的命名约定。创建后，可以通过 https://username.github.io 来访问个人主页。 Hexo提供了hexo-deployer-git工具，可以帮助部署Hexo到github。$ npm install hexo-deployer-git –save修改_config.yml中的配置：123456deploy: type: git repo: https://github.com/xxx/xxx.github.io.git name: xxx //注意：这里配置后 https上传会提示输入用户名 email: xxx@qq.com branch: master 然后执行命令： $ hexo d 参考 发布地址","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]}]}